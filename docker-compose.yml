services:
  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.35
    container_name: jaeger-aio
    ports:
      - "16686:16686"    # UI
      - "14268:14268"    # HTTP for spans
      - "14250:14250"    # gRPC for spans
      - "6831:6831/udp"  # UDP for spans
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"  # UI
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # UI
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana

  # Sentry for error tracking
  sentry:
    image: getsentry/sentry:latest
    platform: linux/amd64  # Force Sentry to use the AMD64 version
    container_name: sentry
    ports:
      - "9000:9000"  # UI
    environment:
      - SENTRY_SECRET_KEY=some_secret_key
      - SENTRY_POSTGRES_HOST=postgres
      - SENTRY_REDIS_HOST=redis
    depends_on:
      - postgres
      - redis

  # Postgres for Sentry
  postgres:
    image: postgres:12
    container_name: sentry-postgres
    environment:
      - POSTGRES_USER=sentry
      - POSTGRES_PASSWORD=sentry
      - POSTGRES_DB=sentry
    volumes:
      - sentry-postgres-data:/var/lib/postgresql/data

  # Redis for Sentry
  redis:
    image: redis:latest
    container_name: sentry-redis
    volumes:
      - sentry-redis-data:/data

volumes:
  grafana-data:
  sentry-postgres-data:
  sentry-redis-data: